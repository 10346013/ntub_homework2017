請用「自己的話」舉例說明什麼叫做「Duck Typing」

假設我要分辨1元根5元的硬幣並且統計每一種硬幣的總價值，假設我們的數錢的方法叫count_dollar(money)，
而各自的類別 (1元)dollar (5元)dollars，裡面有total跟total_price。

total 輸出  X=self; for(y=0,y>self,y++){sum=sum+1;} "總共有"+sum+"個+"X"+元硬幣";
total_price 輸出 (1元) sum=sum+1;  (5元)sum=sum+5; 

兩者並非完全一樣的，但同時使用一個相同的分法進行，所以我們在使用時須要辨別，所以在count_dollar之外包上一個test方法
那我們呼叫方法時就要給2個類別各自的變數，那在我們數值進去的同時會辨別需要使用的類別為何，並且進行計算。

所以「Duck Typing」使用的範圍為需要用同一個方法但會有不同結果時使用。


請用「自己的話」舉例說明實體方法(instance method) 跟類別方法(class method) 的差別。

實體方法(instance method)是實際存在於整個程式裡面，只要有隊的數值傳入或呼叫就能執行，而且不同的實體方法之皆無法互相覆蓋。
而類別方法(class method) 則不同，他們是可以被互相覆蓋的方法。

舉例來說今天我有一個實體方法叫car，裡面有兩種不同類別方法一個叫"catty",另一個叫"doggy"
如果我同時將兩個類別方法同時呼叫時，比較後面的那一個類別方法是可以完全執行完畢的，但前面那一個類別卻不行，因為後面來的已經把他蓋掉了，
所以沒有辦法執行。


在 Ruby 引入模組有兩種方式：include 跟 extend ，請舉例並說明這兩個方法的差別？

include 是一種主動去尋找資源的方式，可以在需要時才將程式碼找過來用。
extend 是繼承父程式的所有編碼，所以無法直接拆分出需要的程式，必須全部一次拿過來用。

比如說今天有一本教ruby on rails的書，
如果我使用extend方法來做我的筆記，那我就必須從頭開始看起(即使有一部分我已經了解了)，
如果我使用include方法來做我的筆記，今天我不知道哪邊直接跳過去閱讀即可。
